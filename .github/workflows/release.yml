name: Release

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && !contains(github.event.head_commit.message, 'chore(release)')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install semver
      
      - name: Get current version
        id: current_version
        run: |
          # Read version from a VERSION file or default to 0.1.0
          if [ -f VERSION ]; then
            CURRENT_VERSION=$(cat VERSION)
          else
            CURRENT_VERSION="0.1.0"
            echo "$CURRENT_VERSION" > VERSION
          fi
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      
      - name: Determine version bump
        id: version
        run: |
          # For pre-1.0, we only do patch bumps unless explicitly marked as milestone
          # Look for [milestone] tag to trigger minor version bump
          if git log -1 --pretty=%B | grep -q "\[milestone\]"; then
            echo "bump=minor" >> $GITHUB_OUTPUT
            echo "Pre-1.0 milestone release detected"
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
            echo "Standard patch release for pre-1.0 development"
          fi
      
      - name: Bump version
        id: new_version
        run: |
          python -c "
import semver

current = '${{ steps.current_version.outputs.version }}'
bump_type = '${{ steps.version.outputs.bump }}'

if bump_type == 'major':
    new_version = semver.bump_major(current)
elif bump_type == 'minor':
    new_version = semver.bump_minor(current)
else:
    new_version = semver.bump_patch(current)

print(f'NEW_VERSION={new_version}')
with open('VERSION', 'w') as f:
    f.write(new_version)
" >> $GITHUB_ENV
      
      - name: Update version in files
        run: |
          # Update version in setup.py if it exists
          if [ -f setup.py ]; then
            sed -i "s/version=.*/version='${{ env.NEW_VERSION }}',/" setup.py
          fi
          
          # Update version in __init__.py files
          find . -name "__init__.py" -type f -exec sed -i "s/__version__ = .*/__version__ = '${{ env.NEW_VERSION }}'/" {} \; 2>/dev/null || true
      
      - name: Generate Release Notes
        id: notes
        run: |
          # Extract commit messages since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s" --no-merges)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --no-merges)
          fi
          
          # Create release notes
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "## What's Changed" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Hook System" >> $GITHUB_OUTPUT
          echo "- Multi-agent orchestration through Claude Code hooks" >> $GITHUB_OUTPUT
          echo "- Git worktree isolation for parallel execution" >> $GITHUB_OUTPUT
          echo "- Session-based coordination" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**Note**: This is a pre-1.0 release. Breaking changes may occur without notice." >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Commit version bump
        run: |
          git add -A
          git commit -m "chore(release): v${{ env.NEW_VERSION }}"
          git push
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: Release v${{ env.NEW_VERSION }}
          body: ${{ steps.notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: true  # All pre-1.0 releases are prereleases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}