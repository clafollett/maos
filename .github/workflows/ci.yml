name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  # Cross-platform CI pipeline - runs full CI on all platforms
  ci:
    name: CI (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Install just
        uses: extractions/setup-just@v2
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
      
      # Consolidated environment setup step
      - name: Setup Environment (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          source stack.env
          echo "RUST_TOOLCHAIN: $RUST_TOOLCHAIN"
          echo "BUILD_FLAGS: $BUILD_FLAGS"
          test -n "$RUST_TOOLCHAIN"
          test -n "$BUILD_FLAGS"
      - name: Setup Environment (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Load environment variables from stack.env (PowerShell equivalent of source)
          Get-Content stack.env | ForEach-Object {
            if ($_ -match '^([^#][^=]+)=(.*)$') {
              $name, $value = $matches[1], $matches[2]
              $value = $value -replace '^"(.*)"$', '$1'  # Remove quotes if present
              Set-Content "env:\$name" $value
            }
          }
          # Validate key environment variables are set
          if (-not $env:RUST_TOOLCHAIN) { throw "RUST_TOOLCHAIN not set" }
          if (-not $env:BUILD_FLAGS) { throw "BUILD_FLAGS not set" }
          Write-Host "RUST_TOOLCHAIN: $env:RUST_TOOLCHAIN"
          Write-Host "BUILD_FLAGS: $env:BUILD_FLAGS"
      
      # Install dependencies
      - name: Install development dependencies
        run: just install-deps
      
      # Validate environment
      - name: Validate stack environment
        run: just validate-stack
      
      # Run full CI pipeline
      - name: Run CI pipeline
        run: just ci