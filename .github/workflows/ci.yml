name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  # Validate development environment standards
  validate-stack:
    name: Validate Stack Environment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install just
        uses: extractions/setup-just@v2
      - name: Validate rust-toolchain.toml exists
        run: test -f rust-toolchain.toml
      - name: Validate stack.env exists  
        run: test -f stack.env
      - name: Validate justfile exists
        run: test -f justfile
      - name: Source stack.env and validate
        run: |
          source stack.env
          echo "RUST_TOOLCHAIN: $RUST_TOOLCHAIN"
          echo "BUILD_FLAGS: $BUILD_FLAGS"
          test -n "$RUST_TOOLCHAIN"
          test -n "$BUILD_FLAGS"

  check:
    name: Check
    runs-on: ubuntu-latest
    needs: validate-stack
    steps:
      - uses: actions/checkout@v4
      - name: Install just
        uses: extractions/setup-just@v2
      # Use rust-toolchain.toml automatically (no version specified)
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          # Cache key includes Cargo.toml hash for dependency changes
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
      - name: Run check via just
        run: just check

  # Use just for all CI tasks to ensure consistency with local development
  ci-pipeline:
    name: Full CI Pipeline via Just
    runs-on: ubuntu-latest
    needs: validate-stack
    steps:
      - uses: actions/checkout@v4
      - name: Install just
        uses: extractions/setup-just@v2
      # rust-toolchain.toml automatically sets the toolchain version
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
      - name: Source stack.env and run full CI pipeline
        run: |
          source stack.env
          just ci

  # Cross-platform testing to ensure our setup works everywhere
  cross-platform-test:
    name: Cross-Platform Test
    runs-on: ${{ matrix.os }}
    needs: validate-stack
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Install just
        uses: extractions/setup-just@v2
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
      - name: Test development environment setup
        run: |
          source stack.env
          just validate-stack
          just pre-commit